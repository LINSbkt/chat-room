--- Page 1 ---
Computer Networks SUMMER 2025  
DANG HUYNH 1  Real-Time Chatroom Application with GUI, File Transfer, Emojis, and Encryption  Introduction Modern messaging platforms must balance usability and security, offering users real-time interaction while safeguarding privacy. This project challenges students to build a secure, multi-user chat application that features real-time communication, private messaging, file sharing, emoji support, and message encryption. It focuses on applying client-server architecture, secure socket communication, concurrency handling, and user interface design. By integrating encryption, students will also explore foundational cybersecurity principles alongside networking techniques. Learning Objectives In this project, students will gain hands-on experience in designing and implementing a fully functional multi-user client-server chat application. Through practical development, you will explore key networking concepts, concurrency, and user interface design while learning to build a robust and secure communication system. By the end of this project, students will: • Design and implement a multi-user client-server chat application using TCP. • Use high-level socket libraries to abstract lower-level networking details. • Develop a concurrent server capable of handling multiple clients. • Build a user-friendly GUI to improve user experience. • Implement public and private messaging, with real-time updates. • Add support for file sharing (upload/download between clients). • Add emoji functionality using shortcuts or a GUI emoji picker. • Implement message encryption using symmetric/asymmetric key cryptography. • Handle connection loss, graceful exits, and basic error conditions robustly. • Document and reflect on architectural and design choices. Functional Requirements This project focuses on building a multi-user chat application with key networking and UI features. The following breakdown ensures a well-rounded implementation, assessing user authentication, messaging, concurrency, file sharing, and security. Each feature contributes to a functional and user-friendly communication platform.  Table 1: List of functional requirements and evaluation of the chat application. # Function Description Weight 1 User Authentication Prompt for and enforce unique usernames. 10% 2 Public Messaging Broadcast messages to all users. 10% 3 Private Messaging Direct message between selected users. 10% 4 Active User List Show all currently connected users. 5% 

--- Page 2 ---
Computer Networks SUMMER 2025  
DANG HUYNH 2  5 GUI Interface Friendly, intuitive chat interface. 10% 6 Concurrent Connections Server handles multiple users using threads. 10% 7 File Sharing File send/receive with confirmation. 10% 8 Emoji Support Add emojis through picker or commands. 10% 9 Message Timestamps Show time of each message. 5% 10 Message Encryption Encrypt all messages (at least AES symmetric encryption). 10% 11 Graceful Exit & Errors Handle disconnects, invalid input, and network failures. 10% Total 100% Detailed Functional Instructions These detailed functional instructions outline the minimum requirements for building a reliable multi-user chat application. Each feature ensures smooth communication, security, and usability. However, students are encouraged to expand on these requirements, adding complexity and enhancements to create a more sophisticated and complete chat application. By refining and extending these functions, you can improve performance, security, and user experience beyond the basic implementation. #1. User Authentication • Prompt for a username on startup. • Server maintains list of active usernames. • Reject duplicates and notify client with error popup. #2. Public Messaging • Client sends message and server broadcasts to all clients. • Format: (Global) (HH:MM:SS) message • Messages are encrypted on send, decrypted on receipt. #3. Private Messaging • User selects recipient from list or manually types /w username message. • Format: (Private) (From user) (HH:MM:SS) message • Server routes encrypted message only to selected client. #4. Active User List • Server updates client list on join/leave. • GUI refreshes this list automatically. #5. GUI Interface • Show scrollable message window, input field, user list. • Buttons for send, emoji, file upload. • Color code private vs public messages. • Error/info display in GUI (e.g., "File received", "User left"). #6. Concurrent Connections • Server accepts new connections using threads. • Client listens for messages in a background thread. 

--- Page 3 ---
Computer Networks SUMMER 2025  
DANG HUYNH 3  #7. File Sharing • GUI allows selecting a file for transfer. • Send file metadata and contents in chunks. • Show progress/status (Optional). • Receive side prompts to accept or reject download. #8. Emoji Support • Insert emojis with picker or codes like :smile:, :heart:. • Use a mapping table to translate text to emoji Unicode or image. #9. Message Timestamps • Timestamp added at client side before encryption. • Displayed beside messages in GUI. #10. Message Encryption • Encrypt all message content before sending. • Decrypt on receiver's side before showing in GUI. • Keys should be kept private in memory, not printed/logged. #11. Graceful Exit and Errors • On exit, client notifies server, and user is removed from list. • Server notifies all clients of the disconnection. • All exceptions should be caught and logged. Example of a Chatroom Application Here follows a screenshot showcasing an example of a chatroom application. This interface demonstrates key features such as, real-time public/private messaging, an active user list, and additional enhancements like emoji support and file sharing.  Figure 1: Sample screenshot of the chatroom application. 

--- Page 4 ---
Computer Networks SUMMER 2025  
DANG HUYNH 4   Submission For this project, ensure that all required materials are submitted correctly following these guidelines: • Codebase Submission (GitHub): Upload your client and server source code to GitHub and: o Ensure your repository is well-organized, includes necessary dependencies, and follows best coding practices. o Add a README.md file with clear build and run instructions, dependencies, and additional setup details. o Provide the GitHub repository link in your final report. • Final Report Submission (Email): Submit a final report (PDF) via email, including: o The GitHub link to your codebase. o Objective & Scope: Define the goals of the project and the intended functionality of the chat application. o Architecture Diagram: Provide a visual representation of the system architecture, illustrating the interactions between the client, server, and different components. o Description of Each Function: Explain how key features (such as messaging, file sharing, encryption, and GUI elements) are implemented. FUV ChatroomAc.ve
(System) (12:05:28) FUV-User-1 joined the chatroom.(Global) (12:05:32) FUV-User-1: Hello FUV community!(Private) (To FUV-User-3) (12:05:38): Hi there!(Private) (To FUV-User-3) (12:05:52): How are you doing?(Private) (From FUV-User-3) (12:05:52): Good, you    ?(Global) (12:06:18) FUV-User-1: Nice to meet y’all.(System) (12:10:25) FUV-User-5 leO the chatroom.FUV-User-1FUV-User-2FUV-Uver-3FUV-User-4
/w FUV-User-3 I am doing good :smile:


--- Page 5 ---
Computer Networks SUMMER 2025  
DANG HUYNH 5  o Screenshots of GUI: Include annotated screenshots showcasing the chat interface, messaging functions, and special features (such as emoji support and file transfers). o Testing & Known Issues: Document the testing process, highlighting scenarios covered, results obtained, and any unresolved issues or limitations. o The report must be at least 30 pages and no more than 60 pages. • Video Demo: For additional clarity, a video demo is a mandatory part of the submission. Prepare a short demonstration video (under 5 minutes) showcasing the core functionality of your chat application. The demo should: o Walk through the application's startup, authentication, and user interface. o Demonstrate key interactions such as public/private messaging, file sharing, and emoji support. o Address any edge cases and error handling mechanisms if any. Evaluation Rubrics The grading for this project is based on multiple key aspects that ensure the chat application meets both functional and technical requirements while maintaining stability, security, and efficiency. The breakdown below outlines how different components contribute to the overall assessment.  Table 2: Project evaluation rubrics. Category Description Grade Functional requirements Ensures all core features work correctly, including authentication, messaging, file sharing, emojis, encryption, and error handling 60% Code and Readme quality Assesses code structure, readability, and documentation. The README must provide clear installation and usage instructions. 20% Report and demo video The final report must detail design choices, functionality, encryption, and testing. The demo video showcases the application's features in action. 20% Total 100% Deadline Please visit Canvas for details. 

